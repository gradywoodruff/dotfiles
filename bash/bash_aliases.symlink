alias docker-kill-all='docker ps --format "{{.ID}}" | xargs docker kill'
alias dokku='$HOME/.dokku/contrib/dokku_client.sh'
alias force-push='git push -f origin $(git-branch)'
alias gs='git status'
alias ll='ls -l -a'
alias version='git tag --sort v:refname | grep "^v" | tail -1'
alias lando-login='lando terminus auth:login --machine-token=3irqDZt3z1CUd28nT9GW0EMod_rEA0PEOOXEFYS0E3pko'
alias ls='ls -GpF'
alias pg='pg_ctl -D /usr/local/var/postgres'
alias pg_start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias pg_stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias py='python'
alias shrug='echo "¯\_(ツ)_/¯" | pbcopy'
alias sites='cd ~/Sites'
alias sshkey='cat ~/.ssh/id_rsa.pub | pbcopy'
alias ssh-fingerprint='ssh-keygen -E md5 -lf'
alias sync='git push origin develop; git checkout master; git push origin master; git push origin $(version)'
alias sync_pantheon='git checkout develop && git push origin develop && git checkout master && git push origin master && git push pantheon master; git push origin $(version)'
alias terminus-login='terminus auth:login --machine-token=z-NN58HEoE_XU4Y_E1FSf_v-4aAo-GFOQEG3RPo0xJuMl'
alias lando-login='lando terminus auth:login --machine-token=z-NN58HEoE_XU4Y_E1FSf_v-4aAo-GFOQEG3RPo0xJuMl'
alias xcode_enable_vim='cd ~/Desktop/XVim/; make'
alias xcode_disable_vim='cd ~/Desktop/XVim/; make uninstall'
alias full-pull="git checkout develop; git pull; git checkout master; git pull;"
alias origin-tag='v=$version && git push origin $v'
alias test-tag='git tag --sort v:refname | grep test | tail -1'
alias live-tag='git tag --list | grep live | sort -t _ -k 3,3n | tail -1'
alias test-tag='git tag --sort v:refname | grep _test_ | tail -1'
alias increment-test='t=$(test-tag); p="pantheon_test_"; v=${t:${#p}}; echo $(($v+1))'
alias pantheon-deploy-test='p="pantheon_test_"$(increment-test) && git tag $p && git push pantheon $p'
alias live-tag='git tag --sort v:refname | grep _live_ | tail -1'
alias increment-live='t=$(live-tag); p="pantheon_live_"; v=${t:${#p}}; echo $(($v+1))'
alias pantheon-deploy-live='p="pantheon_live_"$(increment-live) && git tag $p && git push pantheon $p'
alias hotfix-finish='v=$(version | increment) && git flow hotfix finish $v'
alias inc="echo 'perl -pe \'s/([0-9]+)\b/0\$1~01234567890/g\' | perl -pe \'s/0(?!9*~)|([0-9])(?=9*~[0-9]*?\$1([0-9]))|~[0-9]*/\$2/g\'' | pbcopy"
alias log="git log --oneline"

lorem () {
  gtr -dc a-z1-4 </dev/urandom | tr 1-2 ' \n' | awk 'length==0 || length>10' | tr 3-4 ' ' | sed 's/^ *//' | cat -s | sed 's/ / /g' |fmt | head -n $1 | pbcopy
}
www () {
  destination="$1";
  if [ $destination = "github" ]; then
    gitlab_handle="$(git remote -v | head -n 1 | sed 's/.*\/\(.[^.]*\).*/\1/')"; 
    open "https://github.com/gradywoodruff/${gitlab_handle}";
  elif [ $destination = "gitlab" ]; then
    gitlab_handle="$(git remote -v | head -n 1 | sed 's/.*\/\(.[^.]*\).*/\1/')"; 
    open "https://gitlab.com/barrel/${gitlab_handle}";
  elif [ $destination = "gmail" ]; then
    open "https://mail.google.com/mail/u/0/#inbox";
  fi 
}
cdbase () {
  path=$PWD;
  base=${path#/Users/gradywoodruff};
  project_type=$(echo "$base" | cut -d "/" -f2);
  project=$(echo "$base" | cut -d "/" -f3);
  if [ $project_type = "Sites" ]; then
    if [ $project = "well-good" ]; then
      cd ../../..;
    fi;
  else
    echo "no base for this project";
  fi
}
cdtheme () {
  path=$PWD;
  base=${path#/Users/gradywoodruff};
  project_type=$(echo "$base" | cut -d "/" -f2);
  project=$(echo "$base" | cut -d "/" -f3);
  if [ $project_type = "Sites" ]; then
    if [ $project = "well-good" ]; then
      cd wp-content/themes/wellgood-2016;
    fi;
  else
    echo "no theme for this project";
  fi
}
project () {
  # Open encrypted notes
  hdiutil attach ~/Documents/_notes.dmg;

  if [ -f ~/sites/$1/$1.code-workspace ]; then
    echo "Workspace located";
    sites; code $1/$1.code-workspace;
  else
    echo "No workspace available";
    sites; code $1;
  fi
}

# Opens a project in SourceTree
tree () {
  stree ~/documents/sites/${1};
}

# Opens a project's pantheon dashboard
# must be run from somehwere inside 
# TODO: add conditions and constraints
pantheon () {
  sites; cd $1;
  CONFIG_ID=$(cat .lando.yml | grep "id:");
  LANDO_ID=$(cut -d ":" -f 2 <<< "$CONFIG_ID");
  LANDO_ID=$(echo -e "$LANDO_ID" | tr -d '[:space:]');
  open "https://dashboard.pantheon.io/sites/$LANDO_ID";
}

# Opens provided ticket number in JIRA 
# Assumes that the main domain will be 
# https://barrel.atlassian.net/browse/
jira () {
  open "https://barrel.atlassian.net/browse/$1";
}

# Opens full software stack for a project
# - GitLab Merge Requests
# - VSCode
# - SourceTree
stack() {
  project $1;
  tree $1;
  sites; cd $1; www-gitlab;
}

# Removes any local git branches if they have been
# deleted from the origin repository 
prune_branches () {
  if [ -z "$1" ]; then 
    printf "No parameter provided, we'll use a non-destructive command to delete branches safely... \n";
    DELETE_METHOD="-d";
  else
    printf "Parameter 1 was provided, we'll use the force-delete method to remove branches...\n";
    DELETE_METHOD="-D";
  fi
  
  printf "Fetching branches... \n";
  git fetch --all;
  BRANCHES=$(git branch -vv | grep ': gone]' | awk '{print $1}');

  for branch in $BRANCHES; do 
    printf "Attempting to delete $branch..\n";
    git branch $DELETE_METHOD $branch; 
  done
  printf "All done here, goodbye...\n";
}