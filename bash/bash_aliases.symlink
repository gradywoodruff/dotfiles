alias docker-kill-all='docker ps --format "{{.ID}}" | xargs docker kill'
alias dokku='$HOME/.dokku/contrib/dokku_client.sh'
alias force-push='git push -f origin $(git-branch)'
alias ll='ls -l -a'
alias version='git tag --sort v:refname | grep "^v" | tail -1'
alias lando-login='lando terminus auth:login --machine-token=3irqDZt3z1CUd28nT9GW0EMod_rEA0PEOOXEFYS0E3pko'
alias ls='ls -GpF'
alias pg='pg_ctl -D /usr/local/var/postgres'
alias pg_start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias pg_stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias py='python'
alias shrug='echo "¯\_(ツ)_/¯" | pbcopy'
alias sites='cd ~/Sites'
alias sshkey='cat ~/.ssh/id_rsa.pub | pbcopy'
alias ssh-fingerprint='ssh-keygen -E md5 -lf'
alias sync='git push origin develop; git checkout master; git push origin master; git push origin $(version)'
alias sync_pantheon='git checkout develop && git push origin develop && git checkout master && git push origin master && git push pantheon master; git push origin $(version)'
alias terminus-login='terminus auth:login --machine-token=z-NN58HEoE_XU4Y_E1FSf_v-4aAo-GFOQEG3RPo0xJuMl'
alias lando-login='lando terminus auth:login --machine-token=z-NN58HEoE_XU4Y_E1FSf_v-4aAo-GFOQEG3RPo0xJuMl'
alias xcode_enable_vim='cd ~/Desktop/XVim/; make'
alias xcode_disable_vim='cd ~/Desktop/XVim/; make uninstall'
alias full-pull="git checkout develop; git pull; git checkout master; git pull;"
alias origin-tag='v=$version && git push origin $v'
alias test-tag='git tag --sort v:refname | grep test | tail -1'
alias live-tag='git tag --list | grep live | sort -t _ -k 3,3n | tail -1'
alias test-tag='git tag --sort v:refname | grep _test_ | tail -1'
alias increment-test='t=$(test-tag); p="pantheon_test_"; v=${t:${#p}}; echo $(($v+1))'
alias pantheon-deploy-test='p="pantheon_test_"$(increment-test) && git tag $p && git push pantheon $p'
alias live-tag='git tag --sort v:refname | grep _live_ | tail -1'
alias increment-live='t=$(live-tag); p="pantheon_live_"; v=${t:${#p}}; echo $(($v+1))'
alias pantheon-deploy-live='p="pantheon_live_"$(increment-live) && git tag $p && git push pantheon $p'
alias hotfix-finish='v=$(version | increment) && git flow hotfix finish $v'
alias inc="echo 'perl -pe \'s/([0-9]+)\b/0\$1~01234567890/g\' | perl -pe \'s/0(?!9*~)|([0-9])(?=9*~[0-9]*?\$1([0-9]))|~[0-9]*/\$2/g\'' | pbcopy"
alias log="git log --oneline"
alias branch="git branch"

lorem () {
  gtr -dc a-z1-4 </dev/urandom | tr 1-2 ' \n' | awk 'length==0 || length>10' | tr 3-4 ' ' | sed 's/^ *//' | cat -s | sed 's/ / /g' |fmt | head -n $1 | pbcopy
}
www () {
  destination="$1";
  if [ $destination = "github" ]; then
    gitlab_handle="$(git remote -v | head -n 1 | sed 's/.*\/\(.[^.]*\).*/\1/')"; 
    open "https://github.com/gradywoodruff/${gitlab_handle}";
  elif [ $destination = "gitlab" ]; then
    gitlab_handle="$(git remote -v | head -n 1 | sed 's/.*\/\(.[^.]*\).*/\1/')"; 
    open "https://gitlab.com/barrel/${gitlab_handle}";
  elif [ $destination = "gmail" ]; then
    open "https://mail.google.com/mail/u/0/#inbox";
  fi
}
cdbase () {
  path=$PWD;
  base=${path#/Users/gradywoodruff};
  project_type=$(echo "$base" | cut -d "/" -f2);
  project=$(echo "$base" | cut -d "/" -f3);
  if [ $project_type = "Sites" ]; then
    if [ $project = "well-good" ]; then
      cd ../../..;
    fi;
  else
    echo "no base for this project";
  fi
}
cdtheme () {
  path=$PWD;
  base=${path#/Users/gradywoodruff};
  project_type=$(echo "$base" | cut -d "/" -f2);
  project=$(echo "$base" | cut -d "/" -f3);
  if [ $project_type = "Sites" ]; then
    if [ $project = "well-good" ]; then
      cd wp-content/themes/wellgood-2016;
    fi;
  else
    echo "no theme for this project";
  fi
}
note () {
  path=$PWD;
  base=${path#/Users/gradywoodruff};
  project_type=$(echo "$base" | cut -d "/" -f2);
  project=$(echo "$base" | cut -d "/" -f3);
  notes=$(find /Volumes/notes -name "$project" -type d 2>/dev/null);
  note_type=$1;
  if [ $2 ]; then
    note_name=$2;
  else
    note_name=`date '+%Y%m%d%H%M%S'`;
  fi
  if [ $(find "$notes" -name "$note_type" -type d 2>/dev/null) ]; then
    note_path=$(find "$notes" -name "$note_type" -type d 2>/dev/null);
    echo >${note_path}/${note_name}.txt;
  else
    note_name=$note_type;
    note_path=$notes;
    echo >${note_path}/_${note_name}.txt;
  fi
}
now () {
  echo `date '+%Y%m%d%H%M%S'`;
}
todo () {
  path=$PWD;
  base=${path#/Users/gradywoodruff};
  project_type=$(echo "$base" | cut -d "/" -f2);
  project=$(echo "$base" | cut -d "/" -f3);
  notes=$(find /Volumes/notes -name "$project" -type d 2>/dev/null);
  file=$(find "$notes" -name "__todo.*");
  date=`date '+%Y%m%d'`;
  last_date=$(head -n 1 "$file");
  update=${@:1};

  if [ $date == $last_date ]; then
    (echo 1a; echo -e '\t-\t'"$update"; echo .; echo w) | ed - "$file";
  else
    (echo 0a; echo -e '\n'; echo .; echo w) | ed - "$file";
    (echo 0a; echo -e '\t-\t'"$update"; echo .; echo w) | ed - "$file";
    (echo 0a; echo "$date"; echo .; echo w) | ed - "$file";
  fi
  echo "__todo.txt updated";
}
status () {
  path=$PWD;
  base=${path#/Users/gradywoodruff};
  project_type=$(echo "$base" | cut -d "/" -f2);
  project=$(echo "$base" | cut -d "/" -f3);
  notes=$(find /Volumes/notes -name "$project" -type d 2>/dev/null);
  file=$(find "$notes" -name "__status.*");
  date=`date '+%Y%m%d'`;
  time=`date '+%H%M'`;
  last_date=$(head -n 1 "$file");
  last_time=$(sed '2q;d' "$file");
  update=${@:1};

  if [ $date == $last_date ]; then
    if [ $time == $last_time ]; then
      (echo 2a; echo -e '\t-\t'"$update"; echo .; echo w) | ed - "$file";
    else
      (echo 1a; echo -e '\t-\t'"$update"; echo .; echo w) | ed - "$file";
      (echo 1a; echo -e '\t'"$time"; echo .; echo w) | ed - "$file";
    fi
  else
    (echo 0a; echo -e '\n'; echo .; echo w) | ed - "$file";
    (echo 0a; echo -e '\t-\t'"$update"; echo .; echo w) | ed - "$file";
    (echo 0a; echo -e '\t'"$time"; echo .; echo w) | ed - "$file";
    (echo 0a; echo "$date"; echo .; echo w) | ed - "$file";
  fi
  echo "__status.txt updated";
}
project () {
  # Open encrypted notes
  hdiutil attach ~/Documents/_notes.dmg;

  if [ $1 = "well-good" ]; then
    open_harvest=true;
    open_slack=true;
    tabs='https://barrel.harvestapp.com https://barrel.atlassian.net/secure/RapidBoard.jspa?rapidView=87&projectKey=WG https://gitlab.com/barrel/Well-Good https://dashboard.pantheon.io/sites/10fd143a-af36-4acd-bad9-6ef19a2619c6 http://well-good.lndo.site/wp-admin http://well-good.lndo.site';
  elif [ $1 = "sophia_roe" ]; then
    open_harvest=false;
    open_slack=false;
    tabs='https://dashboard.heroku.com/apps/sophiaroe https://s3.console.aws.amazon.com/s3/home?region=us-east-1 https://emailoctopus.com/dashboard http://127.0.0.1:8000';
  elif [ $1 = "cap-beauty" ]; then
    open_harvest=true;
    open_slack=false;
    tabs='https://docs.google.com/document/d/10lpzLG-bPAhr6iXyDP0Xt2L-UdzNz7-lv1swoVq5bt8/edit?ts=5bc8e5f2 https://capbeauty.myshopify.com/admin';
  elif [ $1 = "textpile" ]; then
    open_harvest=true;
    open_slack=false;
    tabs='https://cloud.mongodb.com/v2/5d4b7f09cf09a20e0e0a4593 https://dashboard.heroku.com/apps/textpile https://app.sendgrid.com/ https://textpile.herokuapp.com/ http://localhost:3000/';
  elif [ $1 = "dear-me" ]; then
    open_harvest=true;
    open_slack=false;
    tabs='https://cloud.mongodb.com/v2/5d4b7f09cf09a20e0e0a4593 https://dashboard.heroku.com/apps/dearme-v0 https://github.com/gradywoodruff/dear-me/ https://www.twilio.com/console https://app.sendgrid.com/ http://localhost:3000/';
  elif [ $1 = "fake-weather" ]; then
    open_harvest=true;
    open_slack=false;
    tabs='https://github.com/gradywoodruff/fake-weather';
  else
    open_harvest=false;
    open_slack=false;
  fi 

  if [ -z "$2" ] || [ $2 != "web" ]; then
    if [ "$open_harvest" != false ]; then
      open -a "Harvest";
    fi
    if [ "$open_slack" != false ]; then
      open -a "Slack";
    fi
    if [ -f ~/sites/$1/$1.code-workspace ]; then
      echo "Workspace located";
      sites; code $1/$1.code-workspace;
    else
      echo "No workspace available";
      sites; code $1;
    fi
  fi
  if [ -z "$tabs" ]; then
    echo "No tabs for project";
  else
    open -a "Google Chrome" $tabs;
  fi
}

# Opens a project in SourceTree
tree () {
  stree ~/documents/sites/${1};
}

# Opens a project's pantheon dashboard
# must be run from somehwere inside 
# TODO: add conditions and constraints
pantheon () {
  sites; cd $1;
  CONFIG_ID=$(cat .lando.yml | grep "id:");
  LANDO_ID=$(cut -d ":" -f 2 <<< "$CONFIG_ID");
  LANDO_ID=$(echo -e "$LANDO_ID" | tr -d '[:space:]');
  open "https://dashboard.pantheon.io/sites/$LANDO_ID";
}

# Opens provided ticket number in JIRA 
# Assumes that the main domain will be 
# https://barrel.atlassian.net/browse/
jira () {
  open "https://barrel.atlassian.net/browse/$1";
}

# Opens full software stack for a project
# - GitLab Merge Requests
# - VSCode
# - SourceTree
stack() {
  project $1;
  tree $1;
  sites; cd $1; www-gitlab;
}

# Removes any local git branches if they have been
# deleted from the origin repository 
prune_branches () {
  if [ -z "$1" ]; then 
    printf "No parameter provided, we'll use a non-destructive command to delete branches safely... \n";
    DELETE_METHOD="-d";
  else
    printf "Parameter 1 was provided, we'll use the force-delete method to remove branches...\n";
    DELETE_METHOD="-D";
  fi
  
  printf "Fetching branches... \n";
  git fetch --all;
  BRANCHES=$(git branch -vv | grep ': gone]' | awk '{print $1}');

  for branch in $BRANCHES; do 
    printf "Attempting to delete $branch..\n";
    git branch $DELETE_METHOD $branch; 
  done
  printf "All done here, goodbye...\n";
}